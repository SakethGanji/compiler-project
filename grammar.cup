import java_cup.runtime.*;

/*
  =====================
  Terminals
  =====================
*/

terminal String CLASS_KEYWORD; //2
terminal String FINAL_KEYWORD; //3
terminal String INTEGER_KEYWORD; //4
terminal String CHARACTER_KEYWORD; //5
terminal String BOOLEAN_KEYWORD; //6
terminal String FLOAT_KEYWORD; //7
terminal String VOID_KEYWORD; //8
terminal String IF_KEYWORD; //9
terminal String ELSE_KEYWORD; //10
terminal String WHILE_KEYWORD; //11
terminal String READ_KEYWORD; //12
terminal String PRINT_KEYWORD; //13
terminal String PRINTLINE_KEYWORD; //14
terminal String RETURN_KEYWORD; //15
terminal String TRUE_KEYWORD; //16
terminal String FALSE_KEYWORD; //17
terminal String IDENTIFIER; //18
terminal int INTEGER_LITERAL; //19
terminal char CHARACTER_LITERAL; //20
terminal String STRING_LITERAL; //21
terminal double FLOATING_POINT_LITERAL; //22
terminal String EQUALS_OPERATOR; //23
terminal String PLUS_OPERATOR; //24
terminal String MINUS_OPERATOR; //25
terminal String TILDE_OPERATOR; //26
terminal String MULTIPLICATION_OPERATOR; //27
terminal String DIVISION_OPERATOR; //28
terminal String LESS_THAN_OPERATOR; //29
terminal String GREATER_THAN_OPERATOR; //30
terminal String LESS_THAN_OR_EQUAL_OPERATOR; //31
terminal String GREATER_THAN_OR_EQUAL_OPERATOR; //32
terminal String EQUALITY_OPERATOR; //33
terminal String NOT_EQUAL_OPERATOR; //34
terminal String OR_OPERATOR; //35
terminal String AND_OPERATOR; //36
terminal String SEMICOLON_DELIMITER; //37
terminal String COMMA_DELIMITER; //38
terminal String LEFT_PARENTHESIS; //39
terminal String RIGHT_PARENTHESIS; //40
terminal String LEFT_BRACKET; //41
terminal String RIGHT_BRACKET; //42
terminal String LEFT_SQUARE_BRACKET; //43
terminal String RIGHT_SQUARE_BRACKET; //44
terminal String COLON_DELIMITER; //45
terminal String QUESTION_MARK_OPERATOR; //46
terminal String INCREMENT_OPERATOR;
terminal String DECREMENT_OPERATOR;
terminal String PREFIX_PLUS_OPERATOR;
terminal String PREFIX_MINUS_OPERATOR;
terminal String TYPE_CAST;

/*
  =====================
  Non-Terminals
  =====================
*/

non terminal Program program;
non terminal Memberdecls memberdecls;
non terminal Memberdecl memberdecl;
non terminal Fielddecls fielddecls;
non terminal Methoddecls methoddecls;
non terminal Fielddecl fielddecl;
non terminal Optionalfinal optionalfinal;
non terminal Optionalexpr optionalexpr;
non terminal Methoddecl methoddecl;
non terminal Boolean optionalsemi;
non terminal Returntype returntype;
non terminal String type;
non terminal Argdecls argdecls;
non terminal ArgdeclList argdeclList;
non terminal Argdecl argdecl;
non terminal Stmts stmts;
non terminal Stmt stmt;
non terminal IfEnd ifEnd;
non terminal Name name;
non terminal ArgsList args;
non terminal ReadList readList;
non terminal PrintList printList;
non terminal PrintLineList printLineList;
non terminal Expr expr;
non terminal String binaryOp;
non terminal Expr binaryExpression;
non terminal Expr operandExpression;
non terminal Expr unaryExpression;
non terminal Expr conditionalExpression;
non terminal Expr logicalOrExpression;
non terminal Expr logicalAndExpression;
non terminal Expr equalityExpression;
non terminal Expr relationalExpression;
non terminal Expr additiveExpression;
non terminal Expr multiplicativeExpression;
non terminal Expr postfixExpression;
non terminal Expr primaryExpression;


/*
  =====================
  Precedence
  =====================
*/

precedence left LEFT_PARENTHESIS, RIGHT_PARENTHESIS, LEFT_SQUARE_BRACKET, RIGHT_SQUARE_BRACKET;
precedence right TILDE_OPERATOR, PREFIX_PLUS_OPERATOR, PREFIX_MINUS_OPERATOR, INCREMENT_OPERATOR, DECREMENT_OPERATOR;
precedence left TYPE_CAST;
precedence left MULTIPLICATION_OPERATOR, DIVISION_OPERATOR;
precedence left PLUS_OPERATOR, MINUS_OPERATOR;
precedence left LESS_THAN_OPERATOR, GREATER_THAN_OPERATOR, LESS_THAN_OR_EQUAL_OPERATOR, GREATER_THAN_OR_EQUAL_OPERATOR;
precedence left EQUALITY_OPERATOR, NOT_EQUAL_OPERATOR;
precedence left AND_OPERATOR;
precedence left OR_OPERATOR;
precedence right QUESTION_MARK_OPERATOR, COLON_DELIMITER;

/*
  =====================
  Grammar Rules
  =====================
*/

start with program;

program ::=
  CLASS_KEYWORD IDENTIFIER:id LEFT_BRACKET memberdecls:mds RIGHT_BRACKET
  {: RESULT = new Program(id, mds); :}
;

memberdecls ::=
  memberdecl:md memberdecls:mds
  {: RESULT = new Memberdecls(md, mds); :}
|
  /* Lamda */
  {: RESULT = new Memberdecls(); :}
;

memberdecl ::=
  fielddecl:fd
  {: RESULT = new Memberdecl(fd); :}
|
  methoddecl:md
  {: RESULT = new Memberdecl(md); :}
;

fielddecls ::=
  fielddecl:fd fielddecls:fds
  {: RESULT = new Fielddecls(fd, fds); :}
|
  /* Lamda */
  {: RESULT = new Fielddecls(); :}
;

methoddecls ::=
  methoddecl:md methoddecls:mds
  {: RESULT = new Methoddecls(md, mds); :}
|
  /* Lamda */
  {: RESULT = new Methoddecls(); :}
;

fielddecl ::=
  type:t IDENTIFIER:i optionalexpr:oe SEMICOLON_DELIMITER
  {: RESULT = new Fielddecl(null, t, i, oe, null); :}
|
  FINAL_KEYWORD type:t IDENTIFIER:i optionalexpr:oe SEMICOLON_DELIMITER
  {: RESULT = new Fielddecl("final", t, i, oe, null); :}
|
  type:t IDENTIFIER:i LEFT_SQUARE_BRACKET INTEGER_LITERAL:n RIGHT_SQUARE_BRACKET SEMICOLON_DELIMITER
  {: RESULT = new Fielddecl(null, t, i, null, n); :}
;

optionalexpr ::=
  EQUALS_OPERATOR expr:e
  {: RESULT = new Optionalexpr(e); :}
|
  /* Lamda */
  {: RESULT = new Optionalexpr(null); :}
;

methoddecl ::=
  type:t IDENTIFIER:i LEFT_PARENTHESIS argdecls:ad RIGHT_PARENTHESIS LEFT_BRACKET fielddecls:fd stmts:s RIGHT_BRACKET optionalsemi:os
  {: RESULT = new Methoddecl(t, i, ad, fd, s, os); :}
|
  VOID_KEYWORD IDENTIFIER:i LEFT_PARENTHESIS argdecls:ad RIGHT_PARENTHESIS LEFT_BRACKET fielddecls:fd stmts:s RIGHT_BRACKET optionalsemi:os
  {: RESULT = new Methoddecl("void", i, ad, fd, s, os); :}
;

optionalsemi ::=
  SEMICOLON_DELIMITER
  {: RESULT = true; :}
|
  /* Lamda */
  {: RESULT = false; :}
;

returntype ::=
  type:t
  {: RESULT = new Returntype(t); :}
|
  VOID_KEYWORD
  {: RESULT = new Returntype("void"); :}
;

type ::=
  INTEGER_KEYWORD
  {: RESULT = "int"; :}
|
  CHARACTER_KEYWORD
  {: RESULT = "char"; :}
|
  BOOLEAN_KEYWORD
  {: RESULT = "bool"; :}
|
  FLOAT_KEYWORD
  {: RESULT = "float"; :}
;

argdecls ::=
  argdeclList:al
  {: RESULT = new Argdecls(al); :}
|
  /* Lamda */
  {: RESULT = new Argdecls(null); :}
;

argdeclList ::=
  argdecl:a COMMA_DELIMITER argdeclList:al
  {: RESULT = new ArgdeclList(a, al); :}
|
  argdecl:a
  {: RESULT = new ArgdeclList(a, null); :}
;

argdecl ::=
  type:t IDENTIFIER:i
  {: RESULT = new Argdecl(t, i, false); :}
|
  type:t IDENTIFIER:i LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
  {: RESULT = new Argdecl(t, i, true); :}
;

stmts ::=
  stmt:s stmts:ss
  {: RESULT = new Stmts(s, ss); :}
|
  /* Lamda */
  {: RESULT = new Stmts(); :}
;

stmt ::=
  IF_KEYWORD LEFT_PARENTHESIS expr:e RIGHT_PARENTHESIS LEFT_BRACKET stmts:ss RIGHT_BRACKET ifEnd:ie
  {: RESULT = new IfStmt(e, ss, ie); :}
|
  WHILE_KEYWORD LEFT_PARENTHESIS expr:e RIGHT_PARENTHESIS LEFT_BRACKET stmts:ss RIGHT_BRACKET
  {: RESULT = new WhileStmt(e, ss); :}
|
  name:n EQUALS_OPERATOR expr:e SEMICOLON_DELIMITER
  {: RESULT = new AssignmentStmt(n, e); :}
|
  READ_KEYWORD LEFT_PARENTHESIS readList:rl RIGHT_PARENTHESIS SEMICOLON_DELIMITER
  {: RESULT = new ReadStmt(rl); :}
|
  PRINT_KEYWORD LEFT_PARENTHESIS printList:pl RIGHT_PARENTHESIS SEMICOLON_DELIMITER
  {: RESULT = new PrintStmt(pl); :}
|
  PRINTLINE_KEYWORD LEFT_PARENTHESIS printLineList:pll RIGHT_PARENTHESIS SEMICOLON_DELIMITER
  {: RESULT = new PrintLineStmt(pll); :}
|
  IDENTIFIER:i LEFT_PARENTHESIS RIGHT_PARENTHESIS SEMICOLON_DELIMITER
  {: RESULT = new FunctionCallStmt(i, null); :}
|
  IDENTIFIER:i LEFT_PARENTHESIS args:a RIGHT_PARENTHESIS SEMICOLON_DELIMITER
  {: RESULT = new FunctionCallStmt(i, a); :}
|
  RETURN_KEYWORD SEMICOLON_DELIMITER
  {: RESULT = new ReturnStmt(null); :}
|
  RETURN_KEYWORD expr:e SEMICOLON_DELIMITER
  {: RESULT = new ReturnStmt(e); :}
|
  name:n INCREMENT_OPERATOR SEMICOLON_DELIMITER
  {: RESULT = new IncrementStmt(n); :}
|
  name:n DECREMENT_OPERATOR SEMICOLON_DELIMITER
  {: RESULT = new DecrementStmt(n); :}
|
  LEFT_BRACKET fielddecls:fd stmts:s RIGHT_BRACKET optionalsemi:os
  {: RESULT = new BlockStmt(fd, s, os); :}
;

ifEnd ::=
  ELSE_KEYWORD LEFT_BRACKET stmts:ss RIGHT_BRACKET
  {: RESULT = new IfEnd(ss); :}
|
  /* Lambda */
  {: RESULT = new IfEnd(); :}
;

name ::=
  IDENTIFIER:i
  {: RESULT = new Name(i, null); :}
|
  IDENTIFIER:i LEFT_SQUARE_BRACKET expr:e RIGHT_SQUARE_BRACKET
  {: RESULT = new Name(i, e); :}
;

args ::=
  expr:e COMMA_DELIMITER args:a
  {: RESULT = new ArgsList(e, a); :}
|
  expr:e
  {: RESULT = new ArgsList(e, null); :}
;

readList ::=
  name:n COMMA_DELIMITER readList:rl
  {: RESULT = new ReadList(n, rl); :}
|
  name:n
  {: RESULT = new ReadList(n, null); :}
;

printList ::=
  expr:e COMMA_DELIMITER printList:pl
  {: RESULT = new PrintList(e, pl); :}
|
  expr:e
  {: RESULT = new PrintList(e); :}
;

printLineList ::=
  printList:pl
  {: RESULT = new PrintLineList(pl); :}
|
  /* Lamda */
  {: RESULT = new PrintLineList(null); :}
;

expr ::=
  conditionalExpression:c
  {: RESULT = c; :}
;

conditionalExpression ::=
  logicalOrExpression:lo
  {: RESULT = lo; :}
|
  logicalOrExpression:lo QUESTION_MARK_OPERATOR conditionalExpression:c1 COLON_DELIMITER conditionalExpression:c2
  {: RESULT = new TernaryExpr(lo, c1, c2); :}
;

logicalOrExpression ::=
  logicalAndExpression:la
  {: RESULT = la; :}
|
  logicalOrExpression:lo1 OR_OPERATOR logicalAndExpression:la
  {: RESULT = new BinaryExpr(lo1, "||", la); :}
;

logicalAndExpression ::=
  equalityExpression:eq
  {: RESULT = eq; :}
|
  logicalAndExpression:la1 AND_OPERATOR equalityExpression:eq
  {: RESULT = new BinaryExpr(la1, "&&", eq); :}
;

equalityExpression ::=
  relationalExpression:re
  {: RESULT = re; :}
|
  equalityExpression:eq1 EQUALITY_OPERATOR relationalExpression:re
  {: RESULT = new BinaryExpr(eq1, "==", re); :}
|
  equalityExpression:eq1 NOT_EQUAL_OPERATOR relationalExpression:re
  {: RESULT = new BinaryExpr(eq1, "<>", re); :}
;

relationalExpression ::=
  additiveExpression:ad
  {: RESULT = ad; :}
|
  relationalExpression:re1 LESS_THAN_OPERATOR additiveExpression:ad
  {: RESULT = new BinaryExpr(re1, "<", ad); :}
|
  relationalExpression:re1 GREATER_THAN_OPERATOR additiveExpression:ad
  {: RESULT = new BinaryExpr(re1, ">", ad); :}
|
  relationalExpression:re1 LESS_THAN_OR_EQUAL_OPERATOR additiveExpression:ad
  {: RESULT = new BinaryExpr(re1, "<=", ad); :}
|
  relationalExpression:re1 GREATER_THAN_OR_EQUAL_OPERATOR additiveExpression:ad
  {: RESULT = new BinaryExpr(re1, ">=", ad); :}
;

additiveExpression ::=
  multiplicativeExpression:mu
  {: RESULT = mu; :}
|
  additiveExpression:ad1 PLUS_OPERATOR multiplicativeExpression:mu
  {: RESULT = new BinaryExpr(ad1, "+", mu); :}
|
  additiveExpression:ad1 MINUS_OPERATOR multiplicativeExpression:mu
  {: RESULT = new BinaryExpr(ad1, "-", mu); :}
;

multiplicativeExpression ::=
  unaryExpression:u
  {: RESULT = u; :}
|
  multiplicativeExpression:mu1 MULTIPLICATION_OPERATOR unaryExpression:u
  {: RESULT = new BinaryExpr(mu1, "*", u); :}
|
  multiplicativeExpression:mu1 DIVISION_OPERATOR unaryExpression:u
  {: RESULT = new BinaryExpr(mu1, "/", u); :}
;

unaryExpression ::=
  postfixExpression:p
  {: RESULT = p; :}
|
  TILDE_OPERATOR unaryExpression:u
  {: RESULT = new UnaryExpr("~", u); :}
|
  MINUS_OPERATOR unaryExpression:u
  {: RESULT = new UnaryExpr("-", u); :}
|
  PLUS_OPERATOR unaryExpression:u
  {: RESULT = new UnaryExpr("+", u); :}
;

postfixExpression ::=
  primaryExpression:p
  {: RESULT = p; :}
  // Handle postfix operators like ++ and -- if they are part of your language here
;

primaryExpression ::=
  operandExpression:o
  {: RESULT = o; :}
  // Handle parentheses ( expr ) here to ensure proper precedence
;

operandExpression ::=
  IDENTIFIER:i
  {: RESULT = new OperandExpr(i, "Identifier"); :}
|
  INTEGER_LITERAL:n
  {: RESULT = new OperandExpr(n, "Integer"); :}
|
  CHARACTER_LITERAL:c
  {: RESULT = new OperandExpr(c, "Character"); :}
|
  STRING_LITERAL:s
  {: RESULT = new OperandExpr(s, "String"); :}
|
  FLOATING_POINT_LITERAL:f
  {: RESULT = new OperandExpr(f, "Float"); :}
|
  TRUE_KEYWORD
  {: RESULT = new OperandExpr(true, "Boolean"); :}
|
  FALSE_KEYWORD
  {: RESULT = new OperandExpr(false, "Boolean"); :}
;
