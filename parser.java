
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\005\003\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\007\000\002\007\003\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\060\000\026\022\013\023\015\024\016\025\020\026" +
    "\011\027\007\030\012\032\004\033\010\034\005\001\002" +
    "\000\026\022\013\023\015\024\016\025\020\026\011\027" +
    "\007\030\012\032\004\033\010\034\005\001\002\000\026" +
    "\022\013\023\015\024\016\025\020\026\011\027\007\030" +
    "\012\032\004\033\010\034\005\001\002\000\004\002\060" +
    "\001\002\000\040\002\uffe9\032\uffe9\033\uffe9\035\uffe9\036" +
    "\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9" +
    "\045\uffe9\046\uffe9\057\uffe9\060\uffe9\001\002\000\026\022" +
    "\013\023\015\024\016\025\020\026\011\027\007\030\012" +
    "\032\004\033\010\034\005\001\002\000\040\002\uffea\032" +
    "\uffea\033\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea" +
    "\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea\057\uffea\060" +
    "\uffea\001\002\000\040\002\uffe8\032\uffe8\033\uffe8\035\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044" +
    "\uffe8\045\uffe8\046\uffe8\057\uffe8\060\uffe8\001\002\000\040" +
    "\002\uffe7\032\uffe7\033\uffe7\035\uffe7\036\uffe7\037\uffe7\040" +
    "\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7" +
    "\057\uffe7\060\uffe7\001\002\000\040\002\ufffe\032\ufffe\033" +
    "\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe" +
    "\043\ufffe\044\ufffe\045\ufffe\046\ufffe\057\ufffe\060\ufffe\001" +
    "\002\000\040\002\uffe6\032\uffe6\033\uffe6\035\uffe6\036\uffe6" +
    "\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045" +
    "\uffe6\046\uffe6\057\uffe6\060\uffe6\001\002\000\040\002\uffec" +
    "\032\uffec\033\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041" +
    "\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\057\uffec" +
    "\060\uffec\001\002\000\004\002\000\001\002\000\040\002" +
    "\uffeb\032\uffeb\033\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb" +
    "\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\057" +
    "\uffeb\060\uffeb\001\002\000\040\002\ufff0\032\ufff0\033\ufff0" +
    "\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043" +
    "\ufff0\044\ufff0\045\ufff0\046\ufff0\057\ufff0\060\ufff0\001\002" +
    "\000\036\002\uffff\032\024\033\027\035\035\036\037\037" +
    "\030\040\025\041\034\042\036\043\031\044\023\045\032" +
    "\046\033\060\026\001\002\000\026\022\013\023\015\024" +
    "\016\025\020\026\011\027\007\030\012\032\004\033\010" +
    "\034\005\001\002\000\026\022\013\023\015\024\016\025" +
    "\020\026\011\027\007\030\012\032\004\033\010\034\005" +
    "\001\002\000\026\022\013\023\015\024\016\025\020\026" +
    "\011\027\007\030\012\032\004\033\010\034\005\001\002" +
    "\000\026\022\013\023\015\024\016\025\020\026\011\027" +
    "\007\030\012\032\004\033\010\034\005\001\002\000\026" +
    "\022\013\023\015\024\016\025\020\026\011\027\007\030" +
    "\012\032\004\033\010\034\005\001\002\000\026\022\013" +
    "\023\015\024\016\025\020\026\011\027\007\030\012\032" +
    "\004\033\010\034\005\001\002\000\026\022\013\023\015" +
    "\024\016\025\020\026\011\027\007\030\012\032\004\033" +
    "\010\034\005\001\002\000\026\022\013\023\015\024\016" +
    "\025\020\026\011\027\007\030\012\032\004\033\010\034" +
    "\005\001\002\000\026\022\013\023\015\024\016\025\020" +
    "\026\011\027\007\030\012\032\004\033\010\034\005\001" +
    "\002\000\026\022\013\023\015\024\016\025\020\026\011" +
    "\027\007\030\012\032\004\033\010\034\005\001\002\000" +
    "\026\022\013\023\015\024\016\025\020\026\011\027\007" +
    "\030\012\032\004\033\010\034\005\001\002\000\026\022" +
    "\013\023\015\024\016\025\020\026\011\027\007\030\012" +
    "\032\004\033\010\034\005\001\002\000\026\022\013\023" +
    "\015\024\016\025\020\026\011\027\007\030\012\032\004" +
    "\033\010\034\005\001\002\000\040\002\ufffa\032\ufffa\033" +
    "\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa" +
    "\043\ufffa\044\ufffa\045\ufffa\046\ufffa\057\ufffa\060\026\001" +
    "\002\000\040\002\ufff6\032\024\033\027\035\035\036\037" +
    "\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045" +
    "\ufff6\046\ufff6\057\ufff6\060\026\001\002\000\040\002\ufffb" +
    "\032\ufffb\033\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041" +
    "\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\057\ufffb" +
    "\060\026\001\002\000\040\002\ufff7\032\024\033\027\035" +
    "\035\036\037\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7" +
    "\044\ufff7\045\ufff7\046\ufff7\057\ufff7\060\026\001\002\000" +
    "\040\002\ufff2\032\024\033\027\035\035\036\037\037\030" +
    "\040\025\041\034\042\036\043\031\044\023\045\ufff2\046" +
    "\ufff2\057\ufff2\060\026\001\002\000\040\002\ufff3\032\024" +
    "\033\027\035\035\036\037\037\030\040\025\041\034\042" +
    "\036\043\031\044\023\045\ufff3\046\033\057\ufff3\060\026" +
    "\001\002\000\040\002\ufff5\032\024\033\027\035\035\036" +
    "\037\037\030\040\025\041\034\042\036\043\ufff5\044\ufff5" +
    "\045\ufff5\046\ufff5\057\ufff5\060\026\001\002\000\040\002" +
    "\ufff9\032\024\033\027\035\035\036\037\037\ufff9\040\ufff9" +
    "\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\057" +
    "\ufff9\060\026\001\002\000\040\002\ufffc\032\ufffc\033\ufffc" +
    "\035\035\036\037\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043" +
    "\ufffc\044\ufffc\045\ufffc\046\ufffc\057\ufffc\060\026\001\002" +
    "\000\036\032\024\033\027\035\035\036\037\037\030\040" +
    "\025\041\034\042\036\043\031\044\023\045\032\046\033" +
    "\057\052\060\026\001\002\000\026\022\013\023\015\024" +
    "\016\025\020\026\011\027\007\030\012\032\004\033\010" +
    "\034\005\001\002\000\040\002\ufff1\032\024\033\027\035" +
    "\035\036\037\037\030\040\025\041\034\042\036\043\031" +
    "\044\023\045\032\046\033\057\ufff1\060\026\001\002\000" +
    "\040\002\ufff8\032\024\033\027\035\035\036\037\037\ufff8" +
    "\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046" +
    "\ufff8\057\ufff8\060\026\001\002\000\040\002\ufffd\032\ufffd" +
    "\033\ufffd\035\035\036\037\037\ufffd\040\ufffd\041\ufffd\042" +
    "\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\057\ufffd\060\026" +
    "\001\002\000\040\002\ufff4\032\024\033\027\035\035\036" +
    "\037\037\030\040\025\041\034\042\036\043\ufff4\044\ufff4" +
    "\045\ufff4\046\ufff4\057\ufff4\060\026\001\002\000\040\002" +
    "\uffee\032\uffee\033\uffee\035\035\036\037\037\uffee\040\uffee" +
    "\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee\057" +
    "\uffee\060\026\001\002\000\004\002\001\001\002\000\040" +
    "\002\uffef\032\uffef\033\uffef\035\uffef\036\uffef\037\uffef\040" +
    "\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef" +
    "\057\uffef\060\026\001\002\000\040\002\uffed\032\uffed\033" +
    "\uffed\035\035\036\037\037\uffed\040\uffed\041\uffed\042\uffed" +
    "\043\uffed\044\uffed\045\uffed\046\uffed\057\uffed\060\026\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\060\000\014\002\005\003\016\005\021\006\020\007" +
    "\013\001\001\000\010\005\061\006\020\007\013\001\001" +
    "\000\010\005\060\006\020\007\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\056\006\020\007\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\055\006\020\007\013\001\001" +
    "\000\010\005\054\006\020\007\013\001\001\000\010\005" +
    "\053\006\020\007\013\001\001\000\010\005\050\006\020" +
    "\007\013\001\001\000\010\005\047\006\020\007\013\001" +
    "\001\000\010\005\046\006\020\007\013\001\001\000\010" +
    "\005\045\006\020\007\013\001\001\000\010\005\044\006" +
    "\020\007\013\001\001\000\010\005\043\006\020\007\013" +
    "\001\001\000\010\005\042\006\020\007\013\001\001\000" +
    "\010\005\041\006\020\007\013\001\001\000\010\005\040" +
    "\006\020\007\013\001\001\000\010\005\037\006\020\007" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\052\006\020\007\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= expr 
            {
              Program RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= binaryExpression 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // binaryExpression ::= unaryExpression 
            {
              Expr RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr u = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = u; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryExpression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // binaryExpression ::= binaryExpression PLUS_OPERATOR binaryExpression 
            {
              Expr RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr b1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(b1, "+", b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryExpression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // binaryExpression ::= binaryExpression MINUS_OPERATOR binaryExpression 
            {
              Expr RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr b1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(b1, "-", b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryExpression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // binaryExpression ::= binaryExpression MULTIPLICATION_OPERATOR binaryExpression 
            {
              Expr RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr b1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(b1, "*", b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryExpression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // binaryExpression ::= binaryExpression DIVISION_OPERATOR binaryExpression 
            {
              Expr RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr b1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(b1, "/", b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryExpression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // binaryExpression ::= binaryExpression LESS_THAN_OPERATOR binaryExpression 
            {
              Expr RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr b1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(b1, "<", b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryExpression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // binaryExpression ::= binaryExpression GREATER_THAN_OPERATOR binaryExpression 
            {
              Expr RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr b1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(b1, ">", b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryExpression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // binaryExpression ::= binaryExpression LESS_THAN_OR_EQUAL_OPERATOR binaryExpression 
            {
              Expr RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr b1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(b1, "<=", b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryExpression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // binaryExpression ::= binaryExpression GREATER_THAN_OR_EQUAL_OPERATOR binaryExpression 
            {
              Expr RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr b1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(b1, ">=", b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryExpression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // binaryExpression ::= binaryExpression EQUALITY_OPERATOR binaryExpression 
            {
              Expr RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr b1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(b1, "==", b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryExpression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // binaryExpression ::= binaryExpression NOT_EQUAL_OPERATOR binaryExpression 
            {
              Expr RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr b1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(b1, "<>", b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryExpression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // binaryExpression ::= binaryExpression OR_OPERATOR binaryExpression 
            {
              Expr RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr b1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(b1, "||", b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryExpression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // binaryExpression ::= binaryExpression AND_OPERATOR binaryExpression 
            {
              Expr RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr b1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(b1, "&&", b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryExpression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // binaryExpression ::= binaryExpression QUESTION_MARK_OPERATOR binaryExpression COLON_DELIMITER binaryExpression 
            {
              Expr RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr b1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr b2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TernaryExpr(b1, b2, b3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryExpression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // unaryExpression ::= operandExpression 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr o = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // unaryExpression ::= TILDE_OPERATOR binaryExpression 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExpr("~", b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // unaryExpression ::= MINUS_OPERATOR binaryExpression 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExpr("-", b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // unaryExpression ::= PLUS_OPERATOR binaryExpression 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExpr("+", b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operandExpression ::= IDENTIFIER 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperandExpr(i, "Identifier"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandExpression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operandExpression ::= INTEGER_LITERAL 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int n = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperandExpr(n, "Integer"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandExpression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operandExpression ::= CHARACTER_LITERAL 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char c = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperandExpr(c, "Character"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandExpression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operandExpression ::= STRING_LITERAL 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperandExpr(s, "String"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandExpression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operandExpression ::= FLOATING_POINT_LITERAL 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double f = (double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperandExpr(f, "Float"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandExpression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operandExpression ::= TRUE_KEYWORD 
            {
              Expr RESULT =null;
		 RESULT = new OperandExpr(true, "Boolean"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandExpression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operandExpression ::= FALSE_KEYWORD 
            {
              Expr RESULT =null;
		 RESULT = new OperandExpr(false, "Boolean"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandExpression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
